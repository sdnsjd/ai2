from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from settings import telegram_key
from gigachad.giga import CHECKPOINT_NS, agent, memorysave
from langgraph.checkpoint.base import ChannelVersions
from langchain_core.runnables import RunnableConfig
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from langchain_core.messages.utils import trim_messages, count_tokens_approximately

dp = Dispatcher()
bot = Bot(token=telegram_key)

def make_config(thread_id: str) -> RunnableConfig:
    return RunnableConfig(
        configurable={
            "thread_id": thread_id,
            "checkpoint_ns": CHECKPOINT_NS,
        }
    )

@dp.message(Command("start"))
async def start_bot(message: types.Message):
    menu = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/start")], [KeyboardButton(text="/reset")]],
        resize_keyboard=True,
    )

    welcome_text = """
    üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–∞—Ö–æ–¥–∫–∏–Ω—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ-–ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂, —è —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞!</b> üåü

    –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.

    ‚ú® <b>–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?</b> ‚ú®

    üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b> - –†–∞—Å—Å–∫–∞–∂—É –æ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –Ω–∞–±–æ—Ä–∞
    üìë <b>–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —É—Å–ª–æ–≤–∏—è</b> - –û–±—ä—è—Å–Ω—é —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å
    üé≠ <b>–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è</b> - –î–∞—Ç—É –∏ —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø—ã—Ç–∞–Ω–∏–π
    üìä <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è</b> - –°–∫–∞–∂—É –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è

    üîπ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å?</b> –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ:
    ‚Ä¢ "–ù–∞–∑–æ–≤–∏ –º–Ω–µ –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?"
    ‚Ä¢ "–ö–∞–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è?"
    ‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ - "–õ–µ—á–µ–±–Ω–æ–µ –¥–µ–ª–æ"?"
    ‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?"
    ‚Ä¢ "–ö–∞–∫ –ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?"

    üìå <i>–£–∂–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? –ù–∞–∑–æ–≤–∏—Ç–µ –µ–≥–æ - —Ä–∞—Å—Å–∫–∞–∂—É –¥–µ—Ç–∞–ª–∏!</i>

    üìû <b>–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è:</b>
    ‚òé –¢–µ–ª–µ—Ñ–æ–Ω—ã:
    ‚Ä¢ <code>8 (4236) 62-35-02</code>
    ‚Ä¢ <code>8 (4236) 74-34-71</code>
    ‚Ä¢ <code>8 (4236) 74-33-96.</code>

    ‚úâ E-mail: <code>nggpk@yandex.ru</code>

    –î–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ /reset
    """

    await message.answer(text=welcome_text, reply_markup=menu, parse_mode="HTML")


@dp.message(Command("reset"))
async def reset_memory(message: types.Message):
    if not message.from_user:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."
        )
        return
    user_id = str(message.from_user.id)

    memorysave.delete_thread(user_id)
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç Gigachat –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")


@dp.message(F.text)
async def handle_message(message: types.Message):
    if not message.from_user:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."
        )
        return

    user_id = str(message.from_user.id)

    config = make_config(user_id)

    result = await agent.ainvoke(
        {"messages": [("user", message.text)]},
        config,
    )
    response = result["messages"][-1].content
    await message.answer(response)

    checkpoint_tuple = await memorysave.aget_tuple(config)
    if checkpoint_tuple and checkpoint_tuple.checkpoint:
        checkpoint = checkpoint_tuple.checkpoint.copy()
        metadata = checkpoint_tuple.metadata  # ‚úÖ –±–µ—Ä—ë–º –æ—Ç—Å—é–¥–∞
        current_versions = checkpoint["channel_versions"]
        channel = "messages"
        prev_version_str = current_versions.get(channel, "0")
        prev_version = (
            int(str(prev_version_str).split(".")[0]) if prev_version_str else 0
        )
        new_version = prev_version + 1
        new_version_str = f"{new_version:032d}"
        checkpoint["channel_versions"][channel] = new_version_str
        new_versions: ChannelVersions = {channel: new_version_str}  # ‚úÖ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–¥–µ—Å—å

        # –æ–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = checkpoint["channel_values"]["messages"]
        trimmed_messages = trim_messages(
            messages,
            strategy="last",
            token_counter=count_tokens_approximately,
            max_tokens=5000,
            start_on="human",
            end_on=("human", "tool"),
            include_system=True,
        )
        checkpoint["channel_values"]["messages"] = trimmed_messages
        await memorysave.aput(config, checkpoint, metadata, new_versions)

async def on_shutdown():
    await bot.session.close()
    await dp.storage.close()


async def run_tg():
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()
